#!/bin/bash

set -e

prefix="@prefix@"
datarootdir="@datarootdir@"
for lib in cfg id_map; do
    . "@pkgdatadir@/lib/${lib}.sh"
done

###

confirm()
{
    if (( yes  )); then
        return 0
    elif ! [[ -t 1 ]]; then
        err "confirmation needed but input is not a terminal."
        return 1
    else
        read -p "$1 [y/n] " -r
        case "$REPLY" in
            [Yy])
                return 0
            ;;
            [Yy][Ee][Ss])
                return 0
        esac

        return 1
    fi
}

program=$(basename "$0")

print_help()
{
    cat >&2 <<EOF
Usage: ${program} [-h] -n container-name -d distribution -r release 
    [-f config-file [-x]] [-- lxc-options...]
Options:
    -h
                        Print help
    -n container-name
                        Name of the container to create
    -d distribution     
                        Distribution to use (see lxc-create)
    -r distribution     
                        Release to use for distribution
    -f config-file      
                        Use a custom config file in addition to the default
                        configuration (usually /etc/lxc/default.conf)
    -x                  
                        When specifying a config file, make it the sole 
                        configuration source, without prepending any defaults
    -y
                        Don't prompt for confirmation
    lxc-options         
                        Options to forward to lxc-create
EOF
}

no_default_config=0
yes=0

while getopts "hn:d:r:f:xy" opt; do
    case "$opt" in
    h) print_help; exit 1 ;;
    n) name="$OPTARG" ;;
    d) dist="$OPTARG" ;;
    r) release="$OPTARG" ;;
    f) config_file="$OPTARG" ;;
    x) no_default_config=1 ;;
    y) yes=1 ;;
    \?)
        err "Invalid option: -$OPTARG"
        exit 1
    ;;
    :)
        err "Option -$OPTARG requires an argument."
        exit 1
    ;;
    esac
done

shift $(( OPTIND - 1 ))

if (( $# )) && [[ "$1" != -- ]]; then
    err "Invalid parameters: you must precede lxc options with double dashes"
    exit 1
else
    shift
fi

if [[ -z "$dist" || -z "$release" ]]; then
    print_help
    exit 1
fi

if [[ -n "$config_file"  && ! -f "$config_file" ]]; then
    err "config file doesn't exist"
    exit 1
fi

name_re='^[[:alpha:]][[:alnum:]]*$'
if ! [[ "$name" =~ $name_re ]]; then
    err "invalid container name"
    exit 1
fi

case "$dist" in
debian)
    lxc_dist="debian"
    lxc_release="wheezy"
;;
ubuntu)
    lxc_dist="ubuntu"
    lxc_release="trusty"
;;
*)
    err "invalid distribution."
    exit 1
esac

###

lxc_path=$(lxc-config lxc.lxcpath)
container_path="${lxc_path}/${name}"
if [[ -e "$container_path" ]]; then
    err "container path ${container_path} already exists"
    exit 1
fi

cfg_dir="/root/lxc-configs/${name}"
cfg_path="${cfg_dir}/lxc.conf"

mkdir -p "$cfg_dir"

printable_params()
{
    local args
    for arg in "$@"; do
        if [[ "$arg" == *' '* ]]; then
            echo -n "'${arg}'"
        else
            echo -n "$arg"
        fi
        echo -n ' '
    done
}

if ! (( no_default_config )) \
    && default_conf=$(lxc-config lxc.default_config) \
    && [[ -f "$default_conf" ]]
then
    cp "$default_conf" "$cfg_path"
else
    > "$cfg_path"
fi

if [[ -n "$config_file" ]]; then
    cat "$config_file" >> "$cfg_path"
fi

lxc_cfg_userns_set "$cfg_path" "new" "new"

cat >> "$cfg_path" <<EOF
lxc.hook.clone = @pkgdatadir@/hooks/userns-convert
lxc.hook.clone = @pkgdatadir@/hooks/sysprep
EOF

if ! (( yes )) && confirm "Do you wish to verify the configuration file before creation?"; then
    editor="${VISUAL:-${EDITOR:-vi}}}"
    if ! $editor "$cfg_path"; then
        err "editor exited with error"
        exit 1
    fi
fi

if ! confirm "Create container?"
    exit 1
fi

id_map_add_from_lxc_cfg "$cfg_path"

trap id_map_rollback EXIT

if lxc-create -n "${name}" -f "${cfg_path}" -B zfs \
   -o "${cfg_dir}/create.log" -l INFO \
   -t download -- -d "${lxc_dist}" -r "${lxc_release}" -a amd64 "$@"
then
    id_map_commit
else
    id_map_rollback
fi

trap - EXIT